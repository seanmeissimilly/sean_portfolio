---
import Section from "../Section.astro"
import { work } from "@cv"

import HTML from "@/icons/html.astro"
import CSS from "@/icons/css.astro"
import JavaScript from "@/icons/javascript.astro"
import TypeScript from "@/icons/type.astro"
import React from "@/icons/react.astro"
import Node from "@/icons/node.astro"
import MySQL from "@/icons/sql.astro"
import Git from "@/icons/git.astro"
import GitHub from "@/icons/GitHub.astro"
import Tailwind from "@/icons/tailwind.astro"
import Next from "@/icons/next.astro"
import Swift from "@/icons/swift.astro"
import SwiftUI from "@/icons/swiftui.astro"
import Kotlin from "@/icons/kotlin.astro"
import Flutter from "@/icons/flutter.astro"

const SKILLS_ICONS: Record<string, any> = {
  HTML,
  CSS,
  JavaScript,
  TypeScript,
  React,
  Node,
  MySQL,
  Git,
  GitHub,
  Next,
  Tailwind,
  Swift,
  SwiftUI,
  Kotlin,
  Flutter,
}
---

<Section className={Astro.props.className} title="Experience">
  <ul class="flex flex-col">
    {work.map(({ name, startDate, endDate, position, summary, responsibilities, achievements, url, skills, location, location_type }) => {
      const startYear = new Date(startDate).getFullYear()
      const endYear = endDate != null ? new Date(endDate).getFullYear() : "Present"

      return (
        <li class="relative print:py-2" x-data="{ expanded: false }">
          <div class="group relative grid pb-1 print:pb-0 transition-all print:grid-cols-1 print:gap-1 sm:grid-cols-12 sm:gap-8 md:gap-6 lg:hover:!opacity-100">
            <header class="relative mt-1 text-xs font-semibold sm:col-span-2">
              <time datetime={startDate}>{startYear}</time> - <time datetime={endDate}>{endYear}</time>
            </header>

            <div class="relative flex flex-col pb-6 print:pb-0 before:-ml-6 sm:col-span-10 before:w-px print:before:hidden before:absolute before:bg-skin-muted before:h-full before:mt-2">
              <div class="absolute w-2 h-2 bg-skin-muted rounded-full mt-2 -translate-x-[1.71rem] ring print:hidden ring-skin-fill"></div>

              <h3>
                <div class="inline-flex items-center text-lg print:text-base leading-tight group/link">
                  <span>{position} <span>@</span>
                    {url ? (
                      <a class="text-skin-hue" href={url} target="_blank">{name}</a>
                    ) : (
                      <span>{name}</span>
                    )}
                  </span>
                </div>
              </h3>

              {(location || location_type) && (
                <div class="text-xs text-skin-muted">
                  {location} {location && location_type && '-'} {location_type}
                </div>
              )}

              <div class="mt-4 flex flex-col gap-4 text-sm">
                {summary && (
                  <div class="flex flex-col gap-1">
                    <h4>Summary:</h4>
                    <ul class="text-skin-muted [&>li]:ml-4 list-disc flex flex-col gap-2">
                      {Array.isArray(summary) ? summary.map(item => <li>{item}</li>) : <li>{summary}</li>}
                    </ul>
                  </div>
                )}

                <div x-show="expanded" x-collapse>
                  {responsibilities && responsibilities.length > 0 && (
                    <div class="flex flex-col gap-1">
                      <h4>Responsibilities:</h4>
                      <ul class="text-skin-muted [&>li]:ml-4 list-disc flex flex-col gap-2">
                        {responsibilities.map(r => <li>{r}</li>)}
                      </ul>
                    </div>
                  )}

                  {achievements && achievements.length > 0 && (
                    <div class="flex flex-col gap-1">
                      <h4>Achievements:</h4>
                      <ul class="text-skin-muted [&>li]:ml-4 list-disc flex flex-col gap-2">
                        {achievements.map(a => <li>{a}</li>)}
                      </ul>
                    </div>
                  )}

                  {(!responsibilities || responsibilities.length === 0) &&
                    (!achievements || achievements.length === 0) && (
                      <p class="text-skin-muted text-xs">No additional details</p>
                    )}
                </div>

                <button @click="expanded = !expanded" class="print:hidden flex items-center gap-1.5 text-xs underline text-skin-muted hover:text-skin-base">
                  <span x-text="expanded ? 'Show less' : 'Show more'"></span>
                  <svg class="w-4 h-4 transition-transform" :class="{ 'rotate-180': expanded }" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <polyline points="6 9 12 15 18 9"></polyline>
                  </svg>
                </button>

                {skills && (
                  <ul class="flex flex-wrap gap-2" aria-label="Technologies used">
                    {skills.map(skill => {
                      const iconName = skill === "Next.js" ? "Next" : skill
                      const Icon = SKILLS_ICONS[iconName]
                      return (
                        <li class="bg-skin-button-accent/20 border-skin-hue/20 text-skin-hue flex gap-1 items-center border rounded-md px-2 py-0.5 text-xs">
                          {Icon && <Icon />} <span>{skill}</span>
                        </li>
                      )
                    })}
                  </ul>
                )}
              </div>
            </div>
          </div>
        </li>
      )
    })}
  </ul>
</Section>

<script is:inline defer src="https://cdn.jsdelivr.net/npm/@alpinejs/collapse@3.x.x/dist/cdn.min.js"></script>
<script is:inline defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>

<style>
    li::marker {
        @apply text-skin-hue;
    }
</style>